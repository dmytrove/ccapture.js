!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).DCapture=t()}(this,(function(){"use strict";class e{constructor(e){this.settings=e,this.state="idle",this.eventListeners={}}on(e,t){this.eventListeners[e]||(this.eventListeners[e]=[]),this.eventListeners[e].push(t)}emit(e,t){this.eventListeners[e]&&this.eventListeners[e].forEach((e=>e(t)))}start(){this.state="recording"}stop(){this.state="finished"}add(e){}save(e){}step(){this.emit("step")}dispose(){this.eventListeners={}}}function t(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6;return(e+="").length>=t?e:new Array(t-e.length+1).join("0")+e}class s extends e{constructor(e){super(e),this.extension=".tar",this.mimeType="application/x-tar",this.fileExtension="",this.baseFilename=this.filename,this.tape=null,this.count=0,this.part=1,this.frames=0}start(){this.dispose()}add(e){const s=new FileReader;s.onload=()=>{this.tape.append(t(this.count)+this.fileExtension,new Uint8Array(s.result)),this.settings.autoSaveTime>0&&this.frames/this.settings.framerate>=this.settings.autoSaveTime?this.save((e=>{this.filename=this.baseFilename+"-part-"+t(this.part),"function"==typeof download?download(e,this.filename+this.extension,this.mimeType):(console.warn("Download function not available"),this.emit("error","Download function not available"));const s=this.count;this.dispose(),this.count=s+1,this.part++,this.filename=this.baseFilename+"-part-"+t(this.part),this.frames=0,this.step()})):(this.count++,this.frames++,this.step())},s.onerror=e=>{console.error("Error reading blob:",e),this.emit("error","Error reading blob")},s.readAsArrayBuffer(e)}save(e){if(!this.tape)return console.error("No tape available for saving"),void this.emit("error","No tape available for saving");e(this.tape.save())}dispose(){try{this.tape=new Tar,this.count=0}catch(e){console.error("Could not create Tar instance:",e),this.emit("error","Could not create Tar instance")}}}class i extends s{constructor(e){super(e),this.type="image/png",this.fileExtension=".png"}add(e){try{e.toBlob((e=>{if(!e)return console.error("Failed to create blob from canvas"),void this.emit("error","Failed to create blob from canvas");super.add(e)}),this.type)}catch(e){console.error("Error capturing canvas as PNG:",e),this.emit("error","Error capturing canvas as PNG")}}}class r extends s{constructor(e){super(e),this.type="image/jpeg",this.fileExtension=".jpg",this.quality=e.quality?e.quality/100:.95}add(e){try{e.toBlob((e=>{if(!e)return console.error("Failed to create blob from canvas"),void this.emit("error","Failed to create blob from canvas");super.add(e)}),this.type,this.quality)}catch(e){console.error("Error capturing canvas as JPEG:",e),this.emit("error","Error capturing canvas as JPEG")}}}class o extends e{constructor(e){super(e),this.extension=".webm",this.mimeType="video/webm",this.quality=e.quality||.95,this.framerate=e.framerate||60,this.supported="undefined"!=typeof MediaRecorder,this.supported||console.error("MediaRecorder API not supported in this browser"),this.stream=null,this.recorder=null,this.chunks=[],this.canvas=null,this.context=null,this.firstFrame=!0}start(){if(this.supported)try{this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.stream=this.canvas.captureStream(this.framerate);let e={};try{e={mimeType:"video/webm;codecs=vp9",videoBitsPerSecond:5e6*this.quality},MediaRecorder.isTypeSupported(e.mimeType)||(console.warn("vp9 is not supported, trying vp8"),e.mimeType="video/webm;codecs=vp8"),MediaRecorder.isTypeSupported(e.mimeType)||(console.warn("vp8 is not supported, trying default"),e.mimeType="video/webm")}catch(t){console.warn("Error checking codecs, using defaults",t),e={mimeType:"video/webm"}}this.recorder=new MediaRecorder(this.stream,e),this.chunks=[],this.recorder.ondataavailable=e=>{e.data&&e.data.size>0&&this.chunks.push(e.data)},this.recorder.start(100),this.emit("start")}catch(e){console.error("Error starting MediaRecorder:",e),this.emit("error","Error starting MediaRecorder")}else this.emit("error","MediaRecorder not supported")}add(e){if(this.supported&&this.recorder)try{this.firstFrame&&(this.canvas.width=e.width,this.canvas.height=e.height,this.firstFrame=!1),this.context.drawImage(e,0,0),this.step()}catch(e){console.error("Error adding frame:",e),this.emit("error","Error adding frame")}}stop(){if(this.supported&&this.recorder)return new Promise((e=>{this.recorder.onstop=()=>{this.recorder.requestData(),this.emit("stop"),e()},this.recorder.stop()}))}save(e){if(this.supported&&this.recorder)try{if(0===this.chunks.length)return console.error("No data chunks available"),void this.emit("error","No data recorded");const t=new Blob(this.chunks,{type:this.mimeType});console.log(`Saving blob with ${this.chunks.length} chunks, size: ${t.size} bytes`),e(t)}catch(e){console.error("Error saving recording:",e),this.emit("error","Error saving recording")}else this.emit("error","No recording available")}dispose(){this.recorder&&"inactive"!==this.recorder.state&&this.recorder.stop(),this.stream&&this.stream.getTracks().forEach((e=>e.stop())),this.recorder=null,this.stream=null,this.chunks=[],this.canvas=null,this.context=null,this.firstFrame=!0}}class n extends e{constructor(e){if(super(e),this.extension=".webm",this.mimeType="video/webm",this.quality=e.quality/100||.95,"undefined"==typeof Whammy)throw console.error("Whammy is not loaded"),new Error("Whammy is not loaded");this.encoder=null,this.frameCount=0}start(){try{const e={quality:this.quality,framerate:this.settings.framerate||60};this.encoder=new Whammy.Video(e.framerate,e.quality),this.frameCount=0}catch(e){console.error("Error starting WebM encoder:",e),this.emit("error","Error starting WebM encoder")}}add(e){if(this.encoder)try{this.encoder.add(e),this.frameCount++,this.step()}catch(e){console.error("Error adding frame to WebM:",e),this.emit("error","Error adding frame to WebM")}}stop(){this.encoder}save(e){if(!this.encoder)return console.error("No encoder available"),void this.emit("error","No encoder available");try{const t=this.encoder.compile(),s=new Blob([t],{type:this.mimeType});e&&e(s)}catch(e){console.error("Error saving WebM:",e),this.emit("error","Error saving WebM")}}dispose(){this.encoder=null,this.frameCount=0}}class a extends e{constructor(e){super(e),this.extension=".gif",this.mimeType="image/gif",this.quality=e.quality/100||.8,this.workers=e.workers||4,this.workerPath=e.workersPath+"gif.worker.js",this.canvas=null,this.ctx=null,this.sizeSet=!1,this.encoder=null,this.delay=0}start(){try{if("undefined"==typeof GIF)throw console.error("GIF.js is not loaded"),new Error("GIF.js is not loaded");this.delay=1e3/(this.settings.framerate||60),this.encoder=new GIF({workers:this.workers,quality:Math.round(100*(1-this.quality)),workerScript:this.workerPath,width:150,height:150}),this.encoder.on("progress",(e=>{this.emit("progress",e)})),this.encoder.on("finished",(e=>{this.emit("finished",e),this.savedBlob=e})),this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.sizeSet=!1}catch(e){console.error("Error starting GIF encoder:",e),this.emit("error","Error starting GIF encoder")}}add(e){if(this.encoder)try{this.sizeSet||(this.canvas.width=e.width,this.canvas.height=e.height,this.encoder.setOption("width",this.canvas.width),this.encoder.setOption("height",this.canvas.height),this.sizeSet=!0),this.ctx.drawImage(e,0,0),this.encoder.addFrame(this.ctx,{copy:!0,delay:this.delay}),this.step()}catch(e){console.error("Error adding frame to GIF:",e),this.emit("error","Error adding frame to GIF")}}stop(){if(this.encoder)try{this.encoder.render()}catch(e){console.error("Error stopping GIF encoder:",e),this.emit("error","Error stopping GIF encoder")}}save(e){this.savedBlob?e(this.savedBlob):this.encoder.on("finished",(t=>{e(t)}))}dispose(){this.encoder&&this.encoder.abort(),this.encoder=null,this.canvas=null,this.ctx=null,this.savedBlob=null,this.sizeSet=!1}}window.requestAnimationFrame||(window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)});return class{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.settings=Object.assign({framerate:60,verbose:!1,display:!1,motionBlurFrames:0,quality:100,format:"webm",workersPath:"",timeLimit:0,frameLimit:0,autoSaveTime:0,onProgress:()=>{}},e),this.date=new Date,this.startTime=0,this.deltaTime=0,this.frames=0,this.totalFrames=0,this.frameCount=0,this.paused=!1,this.closed=!1,this.startCallback=null,this.stepCallback=null,this.stopped=!1,this.createEncoder(),this.settings.display&&this.createDisplay()}createEncoder(){switch(this.settings.format){case"webm-mediarecorder":this.log("Using MediaRecorder encoder"),this.encoder=new o(this.settings);break;case"png":this.log("Using PNG encoder"),this.encoder=new i(this.settings);break;case"jpg":case"jpeg":this.log("Using JPEG encoder"),this.encoder=new r(this.settings);break;case"gif":this.log("Using GIF encoder"),this.encoder=new a(this.settings);break;default:this.log("Using WebM encoder"),this.encoder=new n(this.settings)}this.attachEncoderEvents()}attachEncoderEvents(){this.encoder.on("progress",(e=>{this.settings.onProgress&&this.settings.onProgress(e),this.display&&this.updateProgress(e)})),this.encoder.on("error",(e=>{console.error("Encoder error:",e)}))}createDisplay(){const e=document.createElement("div");e.style.position="fixed",e.style.bottom="20px",e.style.left="20px",e.style.backgroundColor="rgba(0, 0, 0, 0.5)",e.style.color="white",e.style.padding="10px",e.style.borderRadius="4px",e.style.fontFamily="Arial, sans-serif",e.style.fontSize="12px",e.style.zIndex="999999";const t=document.createElement("h1");t.textContent="DCapture",t.style.margin="0 0 5px 0",t.style.fontSize="16px",e.appendChild(t);const s=document.createElement("div");s.textContent="Awaiting capture...",e.appendChild(s);const i=document.createElement("div");i.style.width="100%",i.style.height="15px",i.style.backgroundColor="#444",i.style.marginTop="5px",i.style.borderRadius="3px",i.style.overflow="hidden",e.appendChild(i);const r=document.createElement("div");r.style.width="0%",r.style.height="100%",r.style.backgroundColor="#2693e6",i.appendChild(r),this.display=e,this.displayInfo=s,this.displayProgressBar=r,document.body.appendChild(e)}updateDisplayInfo(){if(!this.displayInfo)return;const e=((Date.now()-this.startTime)/1e3).toFixed(2);this.displayInfo.textContent=`Format: ${this.settings.format} | Frames: ${this.frames} | Duration: ${e}s`}updateProgress(e){this.displayProgressBar&&(this.displayProgressBar.style.width=100*e+"%")}log(e){this.settings.verbose&&console.log(`DCapture: ${e}`)}start(e){this.startTime=Date.now(),this.frames=0,this.startCallback=e,this.encoder.start(),this.log("Started recording"),"function"==typeof e&&e()}stop(){return this.stopped=!0,Promise.resolve().then((()=>{if("function"==typeof this.encoder.stop){const e=this.encoder.stop();if(e instanceof Promise)return e}})).then((()=>{this.log("Stopped recording"),this.display&&(this.display.style.backgroundColor="rgba(45, 145, 45, 0.5)")}))}capture(e){if(!this.stopped){if(!this.encoder)throw new Error("No encoder available");if(this.settings.motionBlurFrames>1)this.captureMotionBlur(e);else{if(this.frames++,this.encoder.add(e),this.settings.display&&this.updateDisplayInfo(),this.settings.timeLimit>0){(Date.now()-this.startTime)/1e3>=this.settings.timeLimit&&this.stop().then((()=>this.save()))}this.settings.frameLimit>0&&this.frames>=this.settings.frameLimit&&this.stop().then((()=>this.save()))}}}captureMotionBlur(e){this.frames++,this.encoder.add(e)}save(e){if(!this.encoder)throw new Error("No encoder available");this.encoder.save(e),this.log("Saving...")}dispose(){this.display&&this.display.parentNode&&this.display.parentNode.removeChild(this.display),this.encoder&&"function"==typeof this.encoder.dispose&&this.encoder.dispose(),this.encoder=null,this.display=null,this.displayInfo=null,this.displayProgressBar=null}}}));
